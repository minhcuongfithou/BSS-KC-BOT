(() => {
    console.log(123)
})()
const a = ({ shopData, checkoutButton, Tax }) => {
  // Write code here
}
window.BSS_B2B.addAction('a', a);
const b = ({ checkoutButton }) => {
  // Write code here
  return checkoutButton
}
window.BSS_B2B.addFilter('b', b);
(() => {
    console.log(456)
})()
const c = ({ checkoutButton }) => {
  // Write code here
  return checkoutButton
}
window.BSS_B2B.addFilter('c', c);
// start code automatically generated
class BaseAction {
    constructor() {
        this.handle = {}
    }
    static #registry = new Set();
    static register(sub) {
        if (sub !== BaseAction) this.#registry.add(sub);
    }
    static getSubclasses() {
        return Array.from(this.#registry);
    }
}

class CombinedAction extends BaseAction {
    constructor(...tasks) {
        if (tasks.length === 1 && Array.isArray(tasks[0])) {
            tasks = tasks[0];
        }
        super();

        tasks.forEach(item => {
            const taskInstance =
                typeof item === "function" ? new item() : item;

            for (const [name, fn] of Object.entries(taskInstance.handle)) {
                if (typeof fn !== "function") continue;

                if (this.handle[name]) {
                    const prev = this.handle[name];
                    this.handle[name] = (...args) => {
                        prev(...args);
                        fn(...args);
                    };
                } else {
                    this.handle[name] = fn;
                }
            }
        });
    }
}

// Y3VzdG9tLWNvbmZpcm0tcGFzc3dvcmQ=
/*
┌──────────────────────────────────────────────────┐
│ Thêm field confirm password -- Registration Form │
│ ** Implementer: mcvp9x@gmail.com **              │
│ ** Created at : 06/08/2025 20:43 **              │
│ ** Updated at : 07/08/2025 12:19 **              │
└──────────────────────────────────────────────────┘
*/
class customConfirmPassword extends BaseAction {
    constructor() {
        super();
        this.handle = {
            coreJS: () => {
                const language = {"labelPass":"Conferma password","emptyPass":"Per favore conferma la tua password","incorrectPass":"Le password non corrispondono"}
                const isRFPage = ["123","/pages/bss-form-test"].includes(window.location.pathname)
                if (!isRFPage) return;
                const intervalTime = 100;
                const maxTime = 8000;
                let elapsedTime = 0;
                
                const intervalId = setInterval(() => {
                    const form = document.querySelector(".field-password");
                
                    if (form) {
                        setTimeout(() => {
                            handleForm();
                        }, 50)
                        clearInterval(intervalId);
                    }
                
                    elapsedTime += intervalTime;
                
                    if (elapsedTime >= maxTime) {
                        clearInterval(intervalId);
                    }
                }, intervalTime);
                
                function handleForm() {
                    const confirmPasswordHTML = `<div class="bss-b2b-rf-field field-password bss-b2b-grid-col-3" bis_skin_checked="1">
                            <label for="password" class="label-field" title="Passwort">${language.labelPass}<span class="required">*</span> </label>
                            <div class="password-input" bis_skin_checked="1">
                                <input type="password" id="repassword" class="password" name="repassword" placeholder="">
                                <div class="show-password show-password-confirm" bis_skin_checked="1"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16"> <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"></path> <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"></path> </svg></div>
                                <div class="hide-password hide-password-confirm" style="display: none;" bis_skin_checked="1"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash" viewBox="0 0 16 16"> <path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7.028 7.028 0 0 0-2.79.588l.77.771A5.944 5.944 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.134 13.134 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755-.165.165-.337.328-.517.486l.708.709z"></path> <path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829l.822.822zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829z"></path> <path d="M3.35 5.47c-.18.16-.353.322-.518.487A13.134 13.134 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7.029 7.029 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12-.708.708z"></path> </svg></div>
                            </div>
                            <span class="bss-message bss-password-error"></span>
                        </div>`;
                
                    document.querySelector(".field-password")?.insertAdjacentHTML("afterEnd", confirmPasswordHTML);
                    const form = document.querySelector("form#bss-b2b-register-form")
                    const password = document.getElementById("password");
                    const confirmPassword = document.getElementById("repassword");
                    const messConfirmPass = document.getElementById("repassword")?.closest(".field-password")?.querySelector(".bss-message");
                    const showPassConfirm = document.querySelector(".show-password-confirm")
                    const hidePassConfirm = document.querySelector(".hide-password-confirm")
                    if (!form) return;
                    form.addEventListener("submit", async (event) => {
                        if (confirmPassword.value.trim().length === 0) {
                            confirmPassword.style.setProperty("border-color", "rgb(144, 11, 9)");
                            messConfirmPass.style.setProperty("color", "rgb(255,0,0)");
                            messConfirmPass.textContent = `${language.emptyPass}`;
                            confirmPassword.scrollIntoView({
                                behavior: "smooth",
                                block: "center"
                            });
                        }
                        if (password.value.trim().length === 0) return;
                        if (password.value && confirmPassword.value && password.value !== confirmPassword.value) {
                            event.stopImmediatePropagation();
                            event.preventDefault();
                            event.stopPropagation();
                
                            confirmPassword.style.setProperty("border-color", "rgb(144, 11, 9)");
                            messConfirmPass.style.setProperty("color", "rgb(255,0,0)");
                            messConfirmPass.textContent = `${language.incorrectPass}`;
                            confirmPassword.scrollIntoView({
                                behavior: "smooth",
                                block: "center"
                            });
                        } else {
                            confirmPassword.removeAttribute("style");
                            messConfirmPass.innerHTML = "";
                        }
                    }, true);
                
                    confirmPassword.addEventListener("keyup", () => {
                        confirmPassword.removeAttribute("style");
                        if (messConfirmPass) {
                            messConfirmPass.innerHTML = "";
                        }
                    });
                    confirmPassword.addEventListener("change", () => {
                        confirmPassword.removeAttribute("style");
                        if (messConfirmPass) {
                            messConfirmPass.innerHTML = "";
                        }
                    });
                
                    showPassConfirm.addEventListener("click", e => {
                        confirmPassword.setAttribute("type", "text");
                        showPassConfirm.style.display = "none";
                        hidePassConfirm.style.display = "flex";
                    });
                
                    hidePassConfirm.addEventListener("click", e => {
                        confirmPassword.setAttribute("type", "password");
                        hidePassConfirm.style.display = "none";
                        showPassConfirm.style.display = "flex";
                    });
                }
            },
            
        };
    }
    static { BaseAction.register(this); }
}
// end Y3VzdG9tLWNvbmZpcm0tcGFzc3dvcmQ=;
// Y3VzdG9tLWRpc3BsYXktc29tZS1jb3VudHJ5
/*
┌─────────────────────────────────────────────────────────────────┐
│ Custom chỉ show một vài quốc gia nhất định -- Registration Form │
│ ** Implementer: mcvp9x@gmail.com **                             │
│ ** Created at : 29/06/2025 22:31 **                             │
│ ** Updated at : 07/08/2025 14:36 **                             │
└─────────────────────────────────────────────────────────────────┘
*/
class customDisplaySomeCountry extends BaseAction {
    constructor() {
        super();
        this.handle = {
            coreJS: () => {
                
            },
            customRfCountry: (...data) => {  
              const defaultCountries = data[0];
              const countryList = ["VN","UZ"];
              return defaultCountries.filter(country => countryList.includes(country.value));
            },
        };
    }
    static { BaseAction.register(this); }
}
// end Y3VzdG9tLWRpc3BsYXktc29tZS1jb3VudHJ5;

const subclasses = BaseAction.getSubclasses();
const combine = new CombinedAction(subclasses);
combine.handle.coreJS();

window.BSS_B2B.addFilter('custom:rf/country', combine.handle.customRfCountry);
// end code automatically generated